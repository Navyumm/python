

#***************************************
#! 12. Strings 
#***************************************

#? Strings are sequence of Characters

# In python specifically, strings are a sequence of Unicode Characters (16 bit)

#     Creating Strings
#     Accessing Strings
#     Adding Chars to strings
#     Editing Strings
#     Deleting Strings
#     Operations on Strings
#     String Functions


#* Creating Strings
# s = 'hello'
# s = "hello"
#? multiline string
# s = '''hello''' 
# s = """hello""" 

# s = str('hello')
# print(s)





#***************************************
#! 13.1 List Comprehension
#***************************************

#? List Comprehension provides a concise way of creating lists.

#* newList = [expression for item in iterable if condition == True]

#? Advantages of List Comprehension
# More time-efficient and space-efficient than loops.
# Require fewer lines of code.
# Transforms iterative statement into a formula.


#? Add 1 to 10 numbers to a list
# L = []
# for i in range(1,11):
#     L.append(i)

# print(L)          //  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

#? by using list comprehension
# L = [i for i in range(1,11)]
# print(L)            //  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]





#* Accessing Strings
#? Positive Indexing (Left -> Right) (start with 0)
# s = 'hello world'
# print(s[0])


#? Negative Indexing (Right - Left) (start with -1)
# s = 'hello world'
# print(s[-1])


#? Slicing (when we need one or more chars) 
# s = 'hello world'
# print(s[0:5])
# print(s[2:])
# print(s[:])
# print(s[0:6:2])

# print(s[::-1])

#? Using -ve indexing
# s = 'hello world'
# print(s[-5:0])
# print(s[-1:-5:-1])



#* Editing and Deleting in strings

# s = 'hello world'

# s[0] = 'H'         #? TypeError: 'str' object does not support item assignment

#! Python strings are immutable
#? which means that we can't edit the string


#?************************************************************************* 
# s = 'hello world'
# del s
# print(s)

# del s[-1:-5:2]             
# print(s)
#? delete puri string ho jaati hai but string ke elements 
#? delete nhi hote



#! Operations on Strings
#? 1. Arithmetic Operators  ( + and * )
# print('New' + 'Delhi')
# print('New'*5)
#? 2. Relational Operators
# print('mumbai'=='delhi')
# print('mumbai'>'delhi')   # lexiographically #* It follows ASCII values
# print('Delhi'>'delhi')
#? 3. Logical Operators
# print('hello' and 'world')
# print('hello' or 'world')
# print(' ' and 'world')       #* empty string means false
# print(' ' or 'world')
# print(not 'world')
# print(not ' ')
#? 4. Loops on String
# for i in 'hello':
#     print(i)

# for i in 'hello':
#     print('pune')
#? 5. Membership Operators
# print('d' in 'delhi')



#! String Functions
#* Common functions
#?    1. len
# print(len('hello world'))
#?    2. max
# print(max('hello world'))
#?    3. min
# print(min('hello world'))
#?    4. sorted 
# print(sorted('hello world'))
# print(sorted('hello world', reverse=True))


#* Capitalize/ Title/ upper/ Lower/ Swapcase

# s = 'hello world'
# print(s.capitalize())

# print(s.title())

# print(s.upper())

# print(s.lower())

# print(s.swapcase())



#* Count/ Find/ Index
# s = 'mera naam hi shinchan hai'
# print(s.count('m'))
# print(s.count('t'))    #? it will show error


# print(s.find('hi'))
# print(s.find('makoda'))     #? it will show -1 

# print(s.index(hi))
# print(s.index('chipkali'))   #? it will show error


#* endswith/ startswith
# s = 'mera naam hi shinchan hai'

# print(s.endswith('i'))
# print(s.endswith('k'))

# print(s.startswith('m'))
# print(s.startswith('k'))


#* Format
# name = 'shinchan'
# gender = 'male'

# s = 'Hi my name is {} and I am a sigma {}'
# print(s.format(name,gender))



#* isalnum/ isalpha/ isdigit/ isidentifier
# s = 'shinchan124'

# print(s.isalnum())
# print(s.isalpha())
# print(s.isdigit())
# print(s.isidentifier())



#* Split/ Join
# s = 'Hi my name is shinchan and I am a sigma child'
# print(s.split())
# print(s.split('i'))

# s1 = ['Hi', 'my', 'name', 'is', 'shinchan', 'and', 'I', 'am', 'a', 'sigma', 'child']
# print(" ".join(s1))
# print("i".join(s1))



#* Replace 
# s = 'Hi my name is shinchan'
# print(s.replace('shinchan','nobita'))



#* Strip
# s = '            hello nobita         '
# print(s.strip())

#*****************************************************************************

#! find the length of a given string without using the len() function
# s = input('Enter the string : ')

# counter = 0

# for i in s:
#     counter += 1
    
# print('length of string is : ', counter)



#! Extract the username from a given email.
#! Eg if the email is xuz125@gmail.com
#* then the username should be xuz125

# s = input('Enter the email : ')

# pos = s.index('@')
# print(s[0:pos])



#! count the frequency of a particular character in a provided string.
#! Eg. 'hello how are you' is the string, the frequency of h in this string is 2
# s = input('Enter the string : ')
# char = input('Enter the character : ')

# print(s.count(char))



#! write a program which can remove a particular character from a string
# s = input('Enter the string : ')
# char = input('Enter what you want to remove : ')

# result = ''

# for i in s:

#     if i != char:
#         result = result + i

# print(result)



#! Write a program that can check the number of words in a string without split()

# s = input('Enter the words : ')
# for i in range (0,len(s)//2):
#     if s[i] != s[len(s) - i -1]:
        


#! write a program that can check whether a given string is palindrome or not.
#* like : abba
#* malayalam

# s = input('Enter the word : ')

# flag = True
# for i in range(0,len(s)//2):
#     if s[i] != s[len(s) - i -1]:
#         flag = False
#         print('Not a Palindrome')
#         break

# if flag:
#     print('Palindrome')




#! write a program to count the number of words in a string without split()

# s = input('Enter the word : ')
# L = []
# temp = ''
# for i in s:
    
#     if i != ' ':
#         temp = temp + i
#     else:
#         L.append(temp)
#         temp = ''

# print()



#! write a python program to convert a string to title case without using the title()
# s = input('Enter the word : ')
# L = []
# # print(s.title())
# for i in s.split():
#     L.append(i[0].upper() + i[1:].lower())

# print(" ".join(L))


#! write a program that can convert an integer to string

# num = int(input('Enter the index  number : '))

# digits = '2558215'
# result = ''
# while num != 0:
#     result = digits[num % 10] + result
#     num = num//10
    
# print(result)
# print(type(result))


# *****************************************************************************************


# *********************************************
#! 16  Sets
# *********************************************

# ? A set is an unordered collection of items. Every set element is unique (no duplicates) and must be immutable (cannot be changed).

# ? However, a set itself is mutable. We can add or remove items from it.

# ? Sets can also be used to perform mathematical set operations like union, intersection, symmetric difference, etc.

#! Characteristics:

# ? Unordered
# ? Mutable
# ? No Duplicates
# ? Can't contain mutable data types


# * Creating Sets
# ? empty
# s = set()
# print(s)                                  # set()
# print(type(s))                            # <class 'set'>
# ? 1D and 2D
# s1 = {1,2,3}
# print(s1)                                 # {1, 2, 3}

# s2 = {1,2,3,{4,5}}
# print(s2)                                  #
# ? homo and hetro
# s3 = {1,'hello',4.5,(1,2,3)}
# print(s3)                                 # {1, 4.5, (1, 2, 3), 'hello'}
# ? using type conversion
# s4 = set([1,2,3])
# print(s4)                                 # {1, 2, 3}
# ? duplicates not allowed
# s5 = {1,1,2,2,3,3}
# print(s5)                                 # {1, 2, 3}
# ? set can't have mutable items
# s6 = {1,2,[3,4]}
# print(s6)                                 # TypeError: unhashable type: 'list'


# s1 = {1,2,3}
# s2 = {3,2,1}
# print(s1 == s2)                           # True


# * Accessing Items
# s1 = {1,2,3,4}
# s1[0:3]                                   # TypeError: 'set' object is not subscriptable


# * Adding Items
# S = {1,2,3,4}
# ? add
# S.add(5)
# print(S)                                  # # {1, 2, 3, 4, 5}
# ? update
# S.update([5,6,7])
# print(S)                                  # {1, 2, 3, 4, 5, 6, 7}


# * Deleting Items
# ? del
# s = {1,2,3,4,5}
# print(s)                                  # {1,2,3,4,5}
# del s[0]
# print(s)                                  # TypeError: 'set' object doesn't support item deletion
# ? discard
# s.discard(50)
# print(s)                                  # {1,2,3,4,5}
# ? remove
# s.remove(5)                               # {1,2,3,4}
# s.remove(50)                              # KeyError: 50
# print(s)
# ? pop
# s.pop()                                   # random delete
# print(s)
# ? clear
# s.clear()
# print(s)                                  # cleared all the set items


#! 16.1  Set Operation
# *********************************************

# s1 = {1,2,3,4,5}
# s2 = {4,5,6,7,8}
# ? Union(|)
# s1 | s2
# ? Intersection(&)
# s1 & s2
# ? Difference(-)
# s1 - s2
# s2 - s1
# ? Symmetric Difference(^)
# s1 ^ s2
# ? Membership Test
# 1 not in s1
# ? Iteration
# for i in s1:
#     print(i)


#! 16.2  Set Functions
# *********************************************
# ? len/sum/min/max/sorted
# s = {3,1,4,5,2,7}
# len(s)
# sum(s)
# min(s)
# max(s)
# sorted(s)
# sorted(s,reverse=True)


# ? union/update
# s1 = {1,2,3,4,5}
# s2 = {4,5,6,7,8}
# ? s1 | s2
# s1.union(s1)
# s1.update(s2)
# print(s1)
# print(s2)


# ? intersection/intersection_update
# s1 = {1,2,3,4,5}
# s2 = {4,5,6,7,8}

# s1.intersection(s2)                             # {4,5}

# s1.intersection_update(s2)
# print(s1)                                       # {4,5}
# print(s2)                                       # {4,5,6,7,8}


# ? difference/difference_update
# s1 = {1,2,3,4,5}
# s2 = {4,5,6,7,8}

# s1.difference(s2)                               # {1,2,3}

# s1.difference_update(s2)
# print(s1)
# print(s2)                                       # {4,5,6,7,8}


# ? symmetric_difference/symmetric_difference_update
# s1 = {1,2,3,4,5}
# s2 = {4,5,6,7,8}

# s1.symmetric_difference(s2)                       # {1, 2, 3, 6, 7, 8}

# s1.symmetric_difference_update(s2)
# print(s1)
# print(s2)                                         # {4, 5, 6, 7, 8}


# ? isdisjoint/issubset/issuperset
# s1 = {1,2,3,4}
# s2 = {7,8,5,6}

# s1.isdisjoint(s2)                               # jiske sbhi items alg hote hai


# s1 = {1,2,3,4,5}
# s2 = {3,4,5}

# s2.issubset(s1)                                 # True
# s1.issuperset(s2)                               # True


# ? copy
# s1 = {1,2,3}
# s2 = s1.copy()
# print(s1)
# print(s2)


# *****************************************************************************************


